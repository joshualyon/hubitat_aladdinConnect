/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Change history:

1.1.2 - joshualyon - Added Contact Sensor compatibility shim.
1.1.1 - tomw - Added Actuator for compatibility.
1.1.0 - tomw - Added support for multiple openers.
1.0.0 - tomw - Initial release.

 */

metadata
{
    definition(name: "Aladdin Connect Garage Door", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "Battery"
        capability "GarageDoorControl"
	capability "ContactSensor"
        capability "Initialize"
        capability "SignalStrength"
        
        attribute "commStatus", "string"
    }
}

preferences
{
    section
    {
        input name: "doorNumber", type: "text", title: "Door number (1-3)", required: true
        input name: "openerNumber", type: "text", title: "Opener number", required: true
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def installed()
{
    initialize()
}

def updated()
{
    installed()
    requestRefresh()
}

def initialize()
{
    sendEvent(name: "commStatus", value: "unknown")
    sendEvent(name: "door", value: "unknown")
    sendEvent(name: "contact", value: "open")
    sendEvent(name: "battery", value: "unknown")
    sendEvent(name: "rssi", value: "unknown")
}

def refreshFromMaster(doorNum, doorState)
{
    def doorVals = doorNum.toString().padLeft(2, "0").split("(?!^)")
    
    if(doorVals[1].toString() != doorNumber)
    {
        device.updateSetting("doorNumber", doorVals[1].toString())
    }
    
    if(doorVals[0].toString() != openerNumber)
    {
        device.updateSetting("openerNumber", doorVals[0].toString())
    }
    
    def stateVal = ""
    def contactVal = "open" //default to open unless we know it's fully closed
    switch(doorState.doorStatus.toString())
    {
        case "0":
        case "3":
        case "6":
        case "7":
        default:
            stateVal = "unknown"
            break
        case "1":
            stateVal = "open"
            break
        case "2":
            stateVal = "opening"
            unschedule()
            runIn(10, requestRefresh)
            break
        case "4":
            stateVal = "closed"
	    contactVal = "closed"
            break
        case "5":
            stateVal = "closing"
            unschedule()
            runIn(10, requestRefresh)
            break
    }    
    sendEvent(name: "door", value: stateVal)
    sendEvent(name: "contact", value: contactVal)
    
    sendEvent(name: "battery", value: doorState.doorBattery)
    sendEvent(name: "rssi", value: doorState.doorBLE)
    
    sendEvent(name: "commStatus", value: "good")
}

def close()
{
    try
    {
        def postParams = genParamsPost()
        postParams['body'] = genDoorStateReq(0)
        httpPostExec(postParams, true)
        
        sendEvent(name: "commStatus", value: "good")
        
        // estimate is <10s response time, 10s operation time
        unschedule()
        runIn(20, requestRefresh)
    }
    catch (Exception e)
    {
        logDebug("close() failed: ${e.message}")
        sendEvent(name: "commStatus", value: "error")
    }
}

def open()
{
    try
    {
        def postParams = genParamsPost()
        postParams['body'] = genDoorStateReq(1)
        httpPostExec(postParams, true)
        
        sendEvent(name: "commStatus", value: "good")
        
        // estimate is <10s response time, 10s operation time
        unschedule()
        runIn(20, requestRefresh)
    }
    catch (Exception e)
    {
        logDebug("open() failed: ${e.message}")
        sendEvent(name: "commStatus", value: "error")
    }
}

def requestRefresh()
{
    parent.refreshFromChild()
}

def checkCommStatus()
{
    switch(device.currentValue("commStatus"))
    {
        case "good":
            logDebug("checkCommStatus() success")
            return true
        
        case "error":
        case "unknown":
        default:
            logDebug("checkCommStatus() failed")
            return false
    }
}

def getBasePostURI()
{
    return "https://genie.m2.exosite.com/onep:v1/rpc/process"
}

def genParamsPost()
{
    def params =
        [
            uri: getBasePostURI(),
            headers:
            [
                'AppVersion': '2.10.1',
                'BundleName': 'com.geniecompany.AladdinConnect',
                'User-Agent': 'Aladdin Connect Android v2.10.1',
                'BuildVersion': '131',
                'Authorization': "Token: " + parent.getToken()
            ],
            contentType: 'application/json',
            requestContentType: 'application/json'
        ]
 
    return params
}

def genDoorStateReq(doorState)
{
    def req = """
    {
    "auth": {
        "cik": "${parent.getPortalKey()}",
        "client_id": "${parent.getDevices()[openerNumber.toInteger()]}"
    },
    "calls": [
    	{
            "arguments": [
                {
                    "alias": "dps${doorNumber}.desired_status"
                },
                "${doorState ? 1 : 0}"
            ],
            "id": 1,
            "procedure": "write"
        },
        {
            "arguments": [
                {
                    "alias": "dps${doorNumber}.desired_status_user"
                },
                "${parent.getUsername()}"
            ],
            "id": 2,
            "procedure": "write"
        }
	]
    }
    """
    
    return req
}

def httpPostExec(params, throwToCaller = false)
{
    logDebug("httpPostExec(${params})")
    
    try
    {
        def result
        httpPost(params)
        { resp ->
            if (resp.data)
            {
                logDebug("resp.data = ${resp.data}")
                result = resp.data
            }
        }
        return result
    }
    catch (Exception e)
    {
        logDebug("httpPostExec() failed: ${e.message}")
        if(throwToCaller)
        {
            throw(e)
        }
    }
}
